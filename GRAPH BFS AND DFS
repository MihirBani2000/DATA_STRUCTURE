#include<bits/stdc++.h>
using namespace std;

class Graph
{
int V;
list <int> *adj;
public:
Graph(int );
void addedge(int , int);
void BFS(int);
void dfs(int s,bool vis[]);
};

Graph :: Graph(int V)
{
    this->V=V;
    adj = new list<int> [V];
}

void Graph :: addedge(int m ,int n)
{
    adj[m].push_back(n);
    //adj[n].push_back(m);
}

void Graph :: BFS(int t)
{
    bool *vis = new bool [V];
    for(int i=0 ;i<V;i++)
     vis[i]=0;

    list <int> q;
    vis[t]=1;
    q.push_back(t);

    list <int> :: iterator itr;

    while(!q.empty())
    {
        int s=q.front();
        cout<<s<<" ";
        q.pop_front();
        for(itr=adj[s].begin();itr!=adj[s].end();++itr)
        {
            if(!vis[*itr])
            {
                q.push_back(*itr);
                vis[*itr]=1;
            }
        }
    }
    cout<<"\n";
}

void Graph :: dfs(int s,bool vis[])
{
    vis[s]=1;
    cout<<s<<" ";
    for(auto itr=adj[s].begin();itr!=adj[s].end();itr++)
        if(!vis[*itr])
        dfs(*itr,vis);
}
int main()
{
    bool vis[100]={false};
    Graph g(4);
    g.addedge(0, 1);
    g.addedge(0, 2);
    g.addedge(0, 2);
    g.addedge(1, 2);
    g.addedge(2, 0);
    g.addedge(2, 3);
    g.addedge(3, 3);
    g.BFS(2);
    g.dfs(2,vis);
    
    

}










